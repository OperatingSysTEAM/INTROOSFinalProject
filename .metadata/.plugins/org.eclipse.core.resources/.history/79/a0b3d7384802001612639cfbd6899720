package GUI;

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Color;

import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import net.miginfocom.swing.MigLayout;

import javax.swing.AbstractAction;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.UserPrincipal;
import java.util.ArrayList;

public class cmdGUI {
	private JFrame frameMain = new JFrame("INTROOS");
	private JPanel panelMain = new JPanel();
	private JScrollPane scrlMain = new JScrollPane();
	private static JTextPane txtCMD = new JTextPane();
	private JTextField txtInput = new JTextField();
	private String input;
	private String parameter1 = "";
	private String parameter2 = "";
	private String currPath = "C:";

	private ArrayList<String> inputs = new ArrayList<String>();

	public cmdGUI() {
		panelMain.setLayout(new MigLayout("", "[927.00,grow]", "[435.00,grow][35px:35px]"));

		panelMain.add(scrlMain, "cell 0 0,grow");

		txtCMD.setEditable(false);
		txtCMD.setForeground(Color.WHITE);
		txtCMD.setBackground(Color.BLACK);
		txtCMD.setFont(new Font("Lucida Console", Font.PLAIN, 11));
		scrlMain.setViewportView(txtCMD);

		txtInput.setForeground(Color.WHITE);
		txtInput.setBackground(Color.BLACK);
		txtInput.setCaretColor(Color.WHITE);
		txtInput.setFont(new Font("Lucida Console", Font.PLAIN, 11));
		panelMain.add(txtInput, "cell 0 1,grow");

		frameMain.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frameMain.getContentPane().add(panelMain);
		frameMain.setVisible(true);
		frameMain.pack();

		txtCMD.setText("C:\\>");

		txtInput.addActionListener(new AbstractAction() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				txtCMD.setText(txtCMD.getText().concat(txtInput.getText() + "\n"));

				System.out.println("Input: ");
				input = txtInput.getText(); // scans input

				boolean error = false;
				
				{int i = 0; 
				for(i = 0; i < input.length(); i++)
					if(input.charAt(i) != ' ')
						break;
				input = input.substring(i, input.length());}
				
				System.out.println("Your input is: " + input); // for checking

				String[] line = input.split(" "); // splits the whole line per
													// word

				switch (line[0].toLowerCase()) { // command (first word of the
													// line)
				case "copy":
				case "ren":
				case "move":
					boolean quote = false; // checker if there is a " at the end
											// of the word
					int i = 1;
					parameter1 = "";
					parameter2 = "";
					if (line[i].charAt(0) == '\"') {
						for (i = 1; i < line.length; i++) {
							if (line[i].charAt(line[i].length() - 1) == '\"') { // checks
																				// if
																				// current
																				// word
																				// has
																				// "
																				// at
																				// the
																				// end
																				// of
																				// the
																				// word
								quote = true;
								break;
							}
						}
						if (quote == true) { // if word has " at the end
							for (int a = 1; a <= i; a++)
								parameter1 = parameter1 + " " + line[a]; // concatenates
							parameter1 = parameter1.substring(2, parameter1.length() - 1);
						}
					} else // if there is no " "
						parameter1 = line[i];

					i++; // counter for next word
					System.out.println("I = " + i);

					try {
						quote = false; // resets
						while (line[i] == " ")
							i++;

						for (int x = 0; x <= i; x++)
							System.out.println(x + " word = " + line[x] + "*");

						if (line[i].charAt(0) == '\"') { // if word starts with
															// "
							int b = i;
							for (b = i; b < line.length; b++) { // checks if
																// current word
																// (after the
																// first
																// parameter)
																// has " at the
																// end
								if (line[b].charAt(line[b].length() - 1) == '\"') {
									quote = true;
									break;
								}
							}
							if (quote == true) {
								for (int a = i; a <= b; a++) {
									parameter2 = parameter2 + " " + line[a];
								}
								i = b;
								parameter2 = parameter2.substring(2, parameter2.length() - 1);
							}
						} else
							parameter2 = line[i];
						System.out.println("I is " + i);
						i++;
						if (i != line.length && line[i].equals(null) == false) {
							System.out.println(line[i]);
							error = true;
							System.out.println("Sobra parameters!");
						}

						System.out.println("First parameter is: *" + parameter1);
						System.out.println("Second parameter is: *" + parameter2);
					} catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {
						System.out.println("Error!");
						error = true;
					}

					if (error == false) {
						boolean path1 = false;
						boolean path2 = false;
						switch (line[0].toLowerCase()) {
						case "copy":
						case "move":
							if (parameter1.toLowerCase().charAt(0) >= 'a' && parameter1.toLowerCase().charAt(0) <= 'z'
									&& parameter1.toLowerCase().charAt(1) == ':') {
								File f = new File(parameter1);
								System.out.println("HELLO");
								if (f.isFile())
									path1 = true;
								System.out.println(path1);
							}
							if (parameter2.toLowerCase().charAt(0) >= 'a' && parameter2.toLowerCase().charAt(0) <= 'z'
									&& parameter2.toLowerCase().charAt(1) == ':') {
								path2 = true;
								System.out.println(path2);
							}

							if (path1 && path2) {
								File s = new File(parameter1);
								File d = new File(parameter2);

								System.out.println("Inst: " + line[0]);
								System.out.println("Par1: " + parameter1);
								System.out.println("Par2: " + parameter2);

								switch (line[0].toLowerCase()) {
								case "copy":
									System.out.println("About to copy");
									copyFile(s, d);
									System.out.println("COPIED");
									break;
								case "move":
									moveFile(s, d);
									System.out.println("MOVED");
									break;
								}
							}
							break;

						case "ren":
							File s = new File(currPath + "\\" + parameter1);
							if (s.isFile()) {
								File d = new File(currPath + "\\" + parameter2);
								moveFile(s, d);
							}
							break;
						}
					} else {
						// errorrrrr
					}
					break;
				case "del":
					quote = false; // checker if there is a " at the end of the
									// word
					i = 1;
					parameter1 = "";
					parameter2 = "";

					if (line[i].charAt(0) == '\"') {
						for (i = 1; i < line.length; i++) {
							if (line[i].charAt(line[i].length() - 1) == '\"') { // checks
																				// if
																				// current
																				// word
																				// has
																				// "
																				// at
																				// the
																				// end
																				// of
																				// the
																				// word
								quote = true;
								break;
							}
						}
						if (quote == true) {
							for (int a = 1; a <= i; a++)
								parameter1 = parameter1 + " " + line[a]; // concatenates
							parameter1 = parameter1.substring(2, parameter1.length() - 1);
						}
					} else // if there is no " "
						parameter1 = line[i];

					System.out.println("Parameter is: " + parameter1);

					try {
						i++;
						if (line[i].equals(null) == false) {
							error = true;
							System.out.println("Too many parameters!");
						}
					} catch (ArrayIndexOutOfBoundsException e) {

					}

					if (error == false) {
						File s = new File(currPath + "\\" + parameter1);
						if(s.exists())
							deleteFile(s);
						else
							txtCMD.setText(txtCMD.getText().concat("Could Not Find " + currPath + "\\" + parameter1 + "\n\n"));
							
					}
					break;
				case "cd":
					if (line.length > 1) {
						i = 0;
						String nextPath = "\\";
						for (i = 1; i < line.length; i++)
							nextPath = nextPath + line[i] + " ";
						nextPath = currPath + nextPath.substring(0, nextPath.length() - 1);
						if (new File(nextPath).isDirectory())
							currPath = nextPath;
						else {
							System.out.println("The system cannot find the path specified.\n");
							txtCMD.setText(txtCMD.getText().concat("The system cannot find the path specified.\n\n"));
						}
					} else {
						System.out.println(currPath);
						System.out.println();
						txtCMD.setText(txtCMD.getText().concat(currPath + "\n\n"));
					}
					break;
				case "cd..":
					for (i = currPath.length() - 1; i > -1; i--)
						if (currPath.charAt(i) == '\\') {
							currPath = currPath.substring(0, i);
							break;
						}
					break;
				case "dir":
					File dir;
					if (currPath.length() == 2 && currPath.toLowerCase().charAt(0) >= 'a'
							&& currPath.toLowerCase().charAt(0) <= 'z' && currPath.toLowerCase().charAt(1) == ':') {
						dir = new File(currPath + "\\");
						System.out.println("   Directory of " + currPath + "\\\n");
						txtCMD.setText(txtCMD.getText().concat("   Directory of " + currPath + "\\\n\n"));
					} else {
						dir = new File(currPath);
						System.out.println("   Directory of " + currPath + "\n");
						txtCMD.setText(txtCMD.getText().concat("   Directory of " + currPath + "\n\n"));
					}

					if (showContents(dir)) {
						System.out.println("This directory contains 0 files.");
						txtCMD.setText(txtCMD.getText().concat("This directory contains 0 files.\n"));
					}

					txtCMD.setText(txtCMD.getText().concat("   Free Space: " + dir.getFreeSpace() + " bytes\n"));
					txtCMD.setText(txtCMD.getText()
							.concat("   Used Space: " + (dir.getTotalSpace() - dir.getUsableSpace()) + " bytes\n"));

					System.out.println("");
					txtCMD.setText(txtCMD.getText().concat("\n"));
					break;
				case "run":
					if (line.length > 1) {
						String name = "";
						for (i = 1; i < line.length; i++)
							name = line[i] + " ";
						name = name.substring(0, name.length() - 1);
						
						System.out.println("File is: " + name);

						compileCFile(currPath, name);
						runCFile(currPath, name);
					}
					break;
				case "":
					break;
				default:
					boolean drive = false;
					if(line[0].toLowerCase().charAt(0) >= 'a' && line[0].toLowerCase().charAt(0) <= 'z' && line[0].toLowerCase().charAt(1) == ':'){
						File d = new File(line[0].toUpperCase().charAt(0) + ":");
						drive = true;
						if(d.exists()){
							currPath = line[0].toUpperCase().charAt(0) + ":";
							
						}else
							txtCMD.setText(txtCMD.getText().concat("The system cannot find the drive specified\n\n"));
					}					
					if(!drive){
						System.out.println("'" + line[0] + "' is not recognized as an internal or external command,");
						System.out.println("operable program or batch file.");
						txtCMD.setText(txtCMD.getText().concat("'" + line[0] + "' is not recognized as an internal or external command,\n"));
						txtCMD.setText(txtCMD.getText().concat("operable program or batch file.\n"));
					}
					break;
				}

				txtInput.setText("");
				if (currPath.length() == 2 && currPath.toLowerCase().charAt(0) >= 'a'
						&& currPath.toLowerCase().charAt(0) <= 'z' && currPath.toLowerCase().charAt(1) == ':') {
					txtCMD.setText(txtCMD.getText().concat(currPath + "\\>"));
				} else
					txtCMD.setText(txtCMD.getText().concat(currPath + ">"));
			}
		});
	}

	private static void copyFile(File from, File to) {
		int nCopy = 0;
		String p = to.getAbsolutePath().toString();
		String d = "";
		String ex = "";

		try {
			while (to.exists()) {
				nCopy++;
				for (int i = p.length() - 1; i >= 0; i--) {
					if (p.charAt(i) == '.') {
						if (nCopy == 1) {
							d = p.substring(0, i);
							ex = p.substring(i);
							p = p.substring(0, i) + " - Copy" + p.substring(i);
						} else {
							p = d + " - Copy (" + nCopy + ")" + ex;
						}
						to = new File(p);
					}
				}
			}
			Files.copy(from.toPath(), to.toPath());
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}
	}

	private static void deleteFile(File from) {
		try {
			Files.delete(from.toPath());
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}
	}

	private static void moveFile(File from, File to) {
		copyFile(from, to);
		deleteFile(from);
	}

	private static boolean showContents(File dir) {
		File[] filesList = dir.listFiles();
		boolean empty = true;

		// try{
		for (File f : filesList) {
			if (f.isFile()) {
				String file = "";
				file += getDateCreated(f) + "     " + getDateModified(f) + "      " + getSize(f);
				for (int i = file.length(); i < 42; i++)
					file += " ";
				file += getUser(f) + "     ";
				for (int i = file.length(); i < 55; i++)
					file += " ";
				file += f.getName();
				String name = f.getName();
				for (int i = 0; i < name.length(); i++)
					if (name.charAt(i) == '.') {
						name = name.substring(i, name.length());
						break;
					}
				if (!name.toLowerCase().equals(".sys") && !name.toLowerCase().equals(".bat")
						&& !name.toLowerCase().equals(".ini") && !name.toLowerCase().equals(".db")) {
					if (f.getName().length() >= 10 && f.getName().toLowerCase().substring(0, 10).equals("ntuser.dat"))
						;
					else {
						System.out.println(file);
						txtCMD.setText(txtCMD.getText().concat(file + "\n"));
						empty = false;
					}
				}
			}
		}
		return empty;
		// }catch (Exception e){
		// System.out.println(e.getMessage());
		// }
	}

	private static String getSize(File f) {
		String size = "";

		// try{
		if (f.exists()) {

			long bytes = f.length();
			long kilobytes = (bytes / 1024);
			long megabytes = (kilobytes / 1024);
			long gigabytes = (megabytes / 1024);
			long terabytes = (gigabytes / 1024);

			if (bytes < 1000) {
				size = bytes + " bytes";
			} else if (kilobytes < 1000) {
				size = kilobytes + " KB";
			} else if (megabytes < 1000) {
				size = megabytes + " MB";
			} else if (gigabytes < 1000) {
				size = gigabytes + " GB";
			} else if (terabytes < 1000) {
				size = terabytes + " TB";
			}
		}
		return size;
		// }catch (Exception e){
		// System.out.println(e.getMessage());
		// }
		// return size;
	}

	private static String getDateCreated(File f) {
		Path path = f.toPath();
		BasicFileAttributes attr;
		String date = "";

		try {
			attr = Files.readAttributes(path, BasicFileAttributes.class);
			date = attr.creationTime().toString().substring(0, 10);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		return date;
	}

	private static String getDateModified(File f) {
		Path path = f.toPath();
		BasicFileAttributes attr;
		String date = "";

		try {
			attr = Files.readAttributes(path, BasicFileAttributes.class);
			date = attr.lastModifiedTime().toString().substring(0, 10);
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}
		return date;
	}

	private static String getUser(File f) {
		String name = null;
		UserPrincipal owner = null;

		try {
			owner = Files.getOwner(f.toPath());
			name = owner.getName();
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}

		return name;
	}

	private void compileCFile(String currPath, String fileName) {
		String Command = "cmd.exe /C cd " + currPath + " && gcc " + fileName + " -o " + fileName.split(".c")[0] + ".exe";

		try {
			System.out.println("Compiling C File...");
			txtCMD.setText(txtCMD.getText().concat("Compiling C File...\n"));

			Process process = Runtime.getRuntime().exec(Command);

			BufferedReader Error = new BufferedReader(new InputStreamReader(process.getErrorStream()));
			String error = Error.readLine();
			if (error != null) {
				System.out.println("Error: " + error);
				txtCMD.setText(txtCMD.getText().concat("Error: " + error + "\n"));
			}

			BufferedReader Run = new BufferedReader(new InputStreamReader(process.getErrorStream()));
			String output = Run.readLine();
			if (output != null) {
				System.out.println("Output: " + output);
				txtCMD.setText(txtCMD.getText().concat("Output: " + output + "\n"));
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	private void runCFile(String currPath, String fileName) {
		String Command = "cmd.exe /C cd " + currPath + " && " + fileName.split(".c")[0];

		try {
			System.out.println("Running C File...");
			txtCMD.setText(txtCMD.getText().concat("Running C File...\n"));

			Process process = Runtime.getRuntime().exec(Command);

			BufferedReader Run = new BufferedReader(new InputStreamReader(process.getErrorStream()));
			String error = Run.readLine();
			if (error != null) {
				System.out.println("Error: " + error);
				txtCMD.setText(txtCMD.getText().concat("Error: " + error + "\n"));
			}

			BufferedReader Result = new BufferedReader(new InputStreamReader(process.getInputStream()));
			String output = Result.readLine();
			if(output != null){
				System.out.println("Output: ");
				txtCMD.setText(txtCMD.getText().concat("Output: \n"));
			}
			while (output != null){
				System.out.println();
				txtCMD.setText(txtCMD.getText().concat(output));
				
				output = Result.readLine();
			}
			txtCMD.setText(txtCMD.getText().concat("\n"));

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	public boolean errorChecking(String[] line) {
		// added this variable
		boolean error = false;
		switch (line[0].toUpperCase()) {
		case "CD":
			if (line.length == 2)
				error = false;
			else
				error = true;
			break;
		case "DIR":
			if (line.length == 2)
				error = false;
			else
				error = true;
			break;
		case "COPY":
			if (line.length == 3)
				error = false;
			else
				error = true;
			break;
		case "MOVE":
			if (line.length == 3)
				error = false;
			else
				error = true;
			break;
		case "DEL":
			if (line.length == 2)
				error = false;
			else
				error = true;
			break;
		case "REN":
			if (line.length == 3)
				error = false;
			else
				error = true;
			break;
		}
		return error;
	}
}
